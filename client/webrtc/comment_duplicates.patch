--- webrtc.go.orig	2023-05-15 12:00:00.000000000 +0000
+++ webrtc.go	2023-05-15 12:00:00.000000000 +0000
@@ -885,7 +885,7 @@
 }
 
-func (p *Peer) createDataChannels() {
+/*func (p *Peer) createDataChannels() {
 	// Create control channel with reliable configuration
 	controlConfig := &webrtc.DataChannelInit{
 		Ordered: boolPtr(true), // Ordered delivery
@@ -922,7 +922,7 @@
 	p.dataChannel = dataChannel
 
 	// Set up the data channel
-	p.setupDataChannel(dataChannel)
+	p.setupDataChannel(dataChannel)*/
 }
 
 // SendMessage sends a chat message through the data channel
@@ -1055,7 +1055,7 @@
 }
 
-// SendData sends binary data through the data channel
+/*// SendData sends binary data through the data channel
 func (p *Peer) SendData(data []byte) error {
 	// Only lock the mutex for the initial checks, not for the entire send operation
 	p.mu.Lock()
@@ -1173,7 +1173,7 @@
 	// Return immediately without waiting for the send to complete
 	// This keeps the UI responsive even if the WebRTC implementation is slow
 	p.debugLog.Printf("Returning from SendData (message sending in background)")
-	return nil
+	return nil*/
 }
 
 // SetControlHandler sets the handler for control channel messages